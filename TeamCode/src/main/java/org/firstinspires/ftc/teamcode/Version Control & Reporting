------------------------------------------
------------------------------------------
THIS FILE IS FOR DOCUMENTATION OF THE CODE
------------------------------------------
Each "Mark" is distinguished by *Notable*
changes to the code. Some files no longer
exist, because--although the edit was
necessary--It did not necessarily change
the code very much.
------------------------------------------
Contributors-- JB & SB
------------------------------------------
Mark 1 teleOp-- (sep 13)
    We learned how to make a motor move!
    We are both new to Programming robots, especially
    with First's unique jargon.
------------------------------------------
Mark 2 teleOp-- (sep 27)
    We tested out several different strategies, in order
    to learn the coding style better.
------------------------------------------
Mark 3 teleOp-- (oct 14)
    A lot of progress has happened since last time. We
    figured out a basic, four wheel, tank drive teleOp!
------------------------------------------
Mark 4 teleOp-- (oct 19)
    We recently purchased mecanum wheels. They are small,
    but allow for a more dynamic robot. We are brainstorming
    how to code a lazy-susan, but we speculate that it will
    be unnecessary (the robot can now turn in place!)
------------------------------------------
Mark 4.5 teleOp-- (Meet Zero) (nov 2)
    There were major, necessary edits to the code. Some of it
    does not work. We will be using a push-bot for this competition.
------------------------------------------
Mark 5 teleOp-- (Meets One and Two) (nov 16)(dec 7)
    This competition, we once again had to make major cuts. We will,
    once again, be reduced to a push bot. The lazy susan has been
    removed, and new arm designs are being brainstormed.
------------------------------------------
------------------------------------------
Mark 6 is just a cleaner, more organized Mark 5. There is no
separate Mark 5 file.
------------------------------------------
------------------------------------------
Mark 6 teleOp-- (November 9)
    With the new arm built, new wheels put on, and streamlined
    controls, we can finally start to move on to auto. This code
    requires more testing. Many new features, including:
     * Toggleable slow controls
     * A way to deploy the collector system
     * A toggleable collector System
     * A minimal-involvement arm
     * Cleaner, more readable code
        * Added comments
     *And other, minor bug fixes
------------------------------------------
------------------------------------------
Mark 7 teleOp-- (November 29)
    With major cleanup issues, we now have a clunky (working) robot.
    These features include:
    * Clear statement of each function
    * Some modularization
    * minor bug fixes
    * deletion of dysfunctional code
------------------------------------------
------------------------------------------
Mark 8 teleOp (December 21, 2019)--
    Many changes, including optimization of current code. As the robot's
    function has been updated, so has the code.
    These features include:
    * Even spacing of code pieces
    * Optimization updates
    * bug fixes
    * new organizational fixes
------------------------------------------
------------------------------------------
Mark 9 teleOp(January 6, 2020)--
    Several Changes to the code, including optimization.
    Features:
    * More spacing changes
    * Addressal of several warnings
    * Tying up loose variables
    * Bug fixes
    * Clearer declaration
------------------------------------------
------------------------------------------
Mark 10 teleOp(January 17, 2020)--
    Several organizational and code-based changes.
    Some optimization.
    Features:
    * Clearer power variable declaration
    * Grouping of DCMotors and Servos
    * More comments
    * Updated driving controls
    * addition of several mechanical components
------------------------------------------
------------------------------------------
Hardware Mapping--
    A file that declares all the necessary properties
    of our motors, servos, and other mechanical components.
    Created for modularity.
------------------------------------------
------------------------------------------
Autonomous:
------------------------------------------
------------------------------------------
VuforiaIDTest--
    Our first usage of the Vuforia color sensor.
    Sensors are hard!
------------------------------------------
------------------------------------------
ColorCode--
    Our second usage of the Vuforia color sensor,
    this time with a better foundational background.
    Researched mostly by Sam!
------------------------------------------
------------------------------------------
AutoCommands--
    A file containing the bare bones of the necessary
    commands for autonomous. In reference, it is called as
    cmd.*
------------------------------------------
------------------------------------------
AutonomousFile--
    Runnable autonomous file.
------------------------------------------
------------------------------------------
Basic Autonomous Files--
    Consisting of four park-only autos, these work from every starting
    position on the field consistently, and have the option of parking closer
    to the wall or to the interior of the field, for
    as little meshing of Autonomous' as possible.
    Titles:
    *BlueSquareRedTriangleClosePark
    *BlueSquareRedTriangleFarPark
    *RedSquareBlueTriangleClosePark
    *RedSquareBlueTriangleFarPark
------------------------------------------
------------------------------------------
Complex Autonomous Files--
    Consisting of two classes, these autonomous codes are in-development
    and will help to create a pathfinding mechanism for our robot.
    Working with sensors and a digital map, the robot will use trigonometry
    to work its way towards any obstacle.
------------------------------------------
------------------------------------------
QuickVargs.java--
    This file allows for quick usage of a java-specific feature, called Var-args.
    These arguments allow for more dynamic programming, and this class allows
    for several to be used at once.
